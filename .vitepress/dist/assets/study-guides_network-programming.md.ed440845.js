import{_ as n,C as a,o as l,c as p,H as o,Q as e}from"./chunks/framework.9e9a7fd0.js";const u=JSON.parse('{"title":"Network Programming","description":"","frontmatter":{"title":"Network Programming"},"headers":[],"relativePath":"study-guides/network-programming.md","filePath":"study-guides/network-programming.md"}'),t={name:"study-guides/network-programming.md"},c=e(`<nav class="table-of-contents"><ul><li><a href="#sockets">Sockets</a><ul><li><a href="#file-descriptors">File Descriptors</a></li><li><a href="#stream-sockets">Stream Sockets</a></li><li><a href="#datagram-sockets">Datagram Sockets</a></li><li><a href="#raw-sockets">Raw Sockets</a></li><li><a href="#layered-network-protocol">Layered Network Protocol</a></li></ul></li><li><a href="#ip-addresses">IP Addresses</a><ul><li><a href="#ipv4-vs-ipv6">IPv4 vs. IPv6</a></li><li><a href="#network-byte-order">Network Byte Order</a></li><li><a href="#host-byte-order">Host Byte Order</a></li><li><a href="#host-and-network-conversions">Host and Network Conversions</a></li><li><a href="#structs">Structs</a></li></ul></li><li><a href="#system-calls">System Calls</a><ul><li><a href="#getaddrinfo">getaddrinfo()</a></li><li><a href="#socket">socket()</a></li><li><a href="#bind">bind()</a></li><li><a href="#connect">connect()</a></li><li><a href="#listen">listen()</a></li><li><a href="#accept">accept()</a></li><li><a href="#send-and-recv">send() and recv()</a></li><li><a href="#sendto-and-recvfrom">sendto() and recvfrom()</a></li><li><a href="#close-and-shutdown">close() and shutdown()</a></li><li><a href="#getpeername">getpeername()</a></li><li><a href="#gethostname">gethostname()</a></li></ul></li><li><a href="#client-server">Client-Server</a></li><li><a href="#advanced-techniques">Advanced Techniques</a></li></ul></nav><h2 id="sockets" tabindex="-1">Sockets <a class="header-anchor" href="#sockets" aria-label="Permalink to &quot;Sockets&quot;">​</a></h2><h3 id="file-descriptors" tabindex="-1">File Descriptors <a class="header-anchor" href="#file-descriptors" aria-label="Permalink to &quot;File Descriptors&quot;">​</a></h3><h3 id="stream-sockets" tabindex="-1">Stream Sockets <a class="header-anchor" href="#stream-sockets" aria-label="Permalink to &quot;Stream Sockets&quot;">​</a></h3><h4 id="transmission-control-protocol" tabindex="-1">Transmission Control Protocol <a class="header-anchor" href="#transmission-control-protocol" aria-label="Permalink to &quot;Transmission Control Protocol&quot;">​</a></h4><h3 id="datagram-sockets" tabindex="-1">Datagram Sockets <a class="header-anchor" href="#datagram-sockets" aria-label="Permalink to &quot;Datagram Sockets&quot;">​</a></h3><h4 id="user-datagram-protocol" tabindex="-1">User Datagram Protocol <a class="header-anchor" href="#user-datagram-protocol" aria-label="Permalink to &quot;User Datagram Protocol&quot;">​</a></h4><h4 id="internet-protocol" tabindex="-1">Internet Protocol <a class="header-anchor" href="#internet-protocol" aria-label="Permalink to &quot;Internet Protocol&quot;">​</a></h4><h3 id="raw-sockets" tabindex="-1">Raw Sockets <a class="header-anchor" href="#raw-sockets" aria-label="Permalink to &quot;Raw Sockets&quot;">​</a></h3><h3 id="layered-network-protocol" tabindex="-1">Layered Network Protocol <a class="header-anchor" href="#layered-network-protocol" aria-label="Permalink to &quot;Layered Network Protocol&quot;">​</a></h3><ul><li>Application</li><li>Presentation</li><li>Session</li><li>Transport</li><li>Network</li><li>Data Link</li><li>Physical</li></ul><h2 id="ip-addresses" tabindex="-1">IP Addresses <a class="header-anchor" href="#ip-addresses" aria-label="Permalink to &quot;IP Addresses&quot;">​</a></h2><h3 id="ipv4-vs-ipv6" tabindex="-1">IPv4 vs. IPv6 <a class="header-anchor" href="#ipv4-vs-ipv6" aria-label="Permalink to &quot;IPv4 vs. IPv6&quot;">​</a></h3><h3 id="network-byte-order" tabindex="-1">Network Byte Order <a class="header-anchor" href="#network-byte-order" aria-label="Permalink to &quot;Network Byte Order&quot;">​</a></h3><h3 id="host-byte-order" tabindex="-1">Host Byte Order <a class="header-anchor" href="#host-byte-order" aria-label="Permalink to &quot;Host Byte Order&quot;">​</a></h3><h3 id="host-and-network-conversions" tabindex="-1">Host and Network Conversions <a class="header-anchor" href="#host-and-network-conversions" aria-label="Permalink to &quot;Host and Network Conversions&quot;">​</a></h3><h3 id="structs" tabindex="-1">Structs <a class="header-anchor" href="#structs" aria-label="Permalink to &quot;Structs&quot;">​</a></h3><h4 id="addrinfo" tabindex="-1">addrinfo <a class="header-anchor" href="#addrinfo" aria-label="Permalink to &quot;addrinfo&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> addrinfo {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">              ai_flags;</span><span style="color:#6A737D;">     // AI_PASSIVE, AI_CANONNAME, etc.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">              ai_family;</span><span style="color:#6A737D;">    // AF_INET, AF_INET6, AF_UNSPEC</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">              ai_socktype;</span><span style="color:#6A737D;">  // SOCK_STREAM, SOCK_DGRAM</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">              ai_protocol;</span><span style="color:#6A737D;">  // use 0 for &quot;any&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;">           ai_addrlen;</span><span style="color:#6A737D;">   // size of ai_addr in bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ai_addr;</span><span style="color:#6A737D;">      // struct sockaddr_in or _in6</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ai_canonname;</span><span style="color:#6A737D;"> // full canonical hostname</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> addrinfo </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">ai_next;</span><span style="color:#6A737D;">      // linked list, next node</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> addrinfo {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">              ai_flags;</span><span style="color:#6A737D;">     // AI_PASSIVE, AI_CANONNAME, etc.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">              ai_family;</span><span style="color:#6A737D;">    // AF_INET, AF_INET6, AF_UNSPEC</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">              ai_socktype;</span><span style="color:#6A737D;">  // SOCK_STREAM, SOCK_DGRAM</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">              ai_protocol;</span><span style="color:#6A737D;">  // use 0 for &quot;any&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;">           ai_addrlen;</span><span style="color:#6A737D;">   // size of ai_addr in bytes</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ai_addr;</span><span style="color:#6A737D;">      // struct sockaddr_in or _in6</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">            </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ai_canonname;</span><span style="color:#6A737D;"> // full canonical hostname</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> addrinfo </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">ai_next;</span><span style="color:#6A737D;">      // linked list, next node</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div><h4 id="sockaddr" tabindex="-1">sockaddr <a class="header-anchor" href="#sockaddr" aria-label="Permalink to &quot;sockaddr&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;">    sa_family;</span><span style="color:#6A737D;">    // address family, AF_xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">              </span><span style="color:#FFAB70;">sa_data</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">14</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;">  // 14 bytes of protocol address</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">short</span><span style="color:#24292E;">    sa_family;</span><span style="color:#6A737D;">    // address family, AF_xxx</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">              </span><span style="color:#E36209;">sa_data</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">14</span><span style="color:#24292E;">];</span><span style="color:#6A737D;">  // 14 bytes of protocol address</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div><h4 id="sockaddr-in" tabindex="-1">sockaddr_in <a class="header-anchor" href="#sockaddr-in" aria-label="Permalink to &quot;sockaddr_in&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// (IPv4 only--see struct sockaddr_in6 for IPv6)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr_in {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">          sin_family;</span><span style="color:#6A737D;">  // Address family, AF_INET</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sin_port;</span><span style="color:#6A737D;">    // Port number</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> in_addr     sin_addr;</span><span style="color:#6A737D;">    // Internet address</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">sin_zero</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;"> // Same size as struct sockaddr</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// (IPv4 only--see struct sockaddr_in6 for IPv6)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr_in {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">          sin_family;</span><span style="color:#6A737D;">  // Address family, AF_INET</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">short</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sin_port;</span><span style="color:#6A737D;">    // Port number</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> in_addr     sin_addr;</span><span style="color:#6A737D;">    // Internet address</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">      </span><span style="color:#E36209;">sin_zero</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">];</span><span style="color:#6A737D;"> // Same size as struct sockaddr</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div><h4 id="sockaddr-in6" tabindex="-1">sockaddr_in6 <a class="header-anchor" href="#sockaddr-in6" aria-label="Permalink to &quot;sockaddr_in6&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr_in6 {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">u_int16_t</span><span style="color:#E1E4E8;">       sin6_family;</span><span style="color:#6A737D;">   // address family, AF_INET6</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">u_int16_t</span><span style="color:#E1E4E8;">       sin6_port;</span><span style="color:#6A737D;">     // port number, Network Byte Order</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">u_int32_t</span><span style="color:#E1E4E8;">       sin6_flowinfo;</span><span style="color:#6A737D;"> // IPv6 flow information</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> in6_addr sin6_addr;</span><span style="color:#6A737D;">     // IPv6 address</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">u_int32_t</span><span style="color:#E1E4E8;">       sin6_scope_id;</span><span style="color:#6A737D;"> // Scope ID</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> in6_addr {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">   </span><span style="color:#FFAB70;">s6_addr</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">];</span><span style="color:#6A737D;">   // IPv6 address</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr_in6 {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">u_int16_t</span><span style="color:#24292E;">       sin6_family;</span><span style="color:#6A737D;">   // address family, AF_INET6</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">u_int16_t</span><span style="color:#24292E;">       sin6_port;</span><span style="color:#6A737D;">     // port number, Network Byte Order</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">u_int32_t</span><span style="color:#24292E;">       sin6_flowinfo;</span><span style="color:#6A737D;"> // IPv6 flow information</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> in6_addr sin6_addr;</span><span style="color:#6A737D;">     // IPv6 address</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">u_int32_t</span><span style="color:#24292E;">       sin6_scope_id;</span><span style="color:#6A737D;"> // Scope ID</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> in6_addr {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">   </span><span style="color:#E36209;">s6_addr</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">];</span><span style="color:#6A737D;">   // IPv6 address</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span></code></pre></div><h4 id="ip-to-struct-conversion" tabindex="-1">IP to Struct Conversion <a class="header-anchor" href="#ip-to-struct-conversion" aria-label="Permalink to &quot;IP to Struct Conversion&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// IPv4:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ip4</span><span style="color:#E1E4E8;">[INET_ADDRSTRLEN];</span><span style="color:#6A737D;">  // space to hold the IPv4 string</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr_in sa;</span><span style="color:#6A737D;">      // pretend this is loaded with something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">inet_ntop</span><span style="color:#E1E4E8;">(AF_INET, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">(sa.sin_addr), ip4, INET_ADDRSTRLEN);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The IPv4 address is: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, ip4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// IPv6:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">ip6</span><span style="color:#E1E4E8;">[INET6_ADDRSTRLEN];</span><span style="color:#6A737D;"> // space to hold the IPv6 string</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr_in6 sa6;</span><span style="color:#6A737D;">    // pretend this is loaded with something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">inet_ntop</span><span style="color:#E1E4E8;">(AF_INET6, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The address is: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, ip6);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// IPv4:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ip4</span><span style="color:#24292E;">[INET_ADDRSTRLEN];</span><span style="color:#6A737D;">  // space to hold the IPv4 string</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr_in sa;</span><span style="color:#6A737D;">      // pretend this is loaded with something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">inet_ntop</span><span style="color:#24292E;">(AF_INET, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">(sa.sin_addr), ip4, INET_ADDRSTRLEN);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The IPv4 address is: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, ip4);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// IPv6:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ip6</span><span style="color:#24292E;">[INET6_ADDRSTRLEN];</span><span style="color:#6A737D;"> // space to hold the IPv6 string</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr_in6 sa6;</span><span style="color:#6A737D;">    // pretend this is loaded with something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">inet_ntop</span><span style="color:#24292E;">(AF_INET6, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The address is: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, ip6);</span></span></code></pre></div><h4 id="network-address-translation" tabindex="-1">Network Address Translation <a class="header-anchor" href="#network-address-translation" aria-label="Permalink to &quot;Network Address Translation&quot;">​</a></h4><h2 id="system-calls" tabindex="-1">System Calls <a class="header-anchor" href="#system-calls" aria-label="Permalink to &quot;System Calls&quot;">​</a></h2><h3 id="getaddrinfo" tabindex="-1">getaddrinfo() <a class="header-anchor" href="#getaddrinfo" aria-label="Permalink to &quot;getaddrinfo()&quot;">​</a></h3><h3 id="socket" tabindex="-1">socket() <a class="header-anchor" href="#socket" aria-label="Permalink to &quot;socket()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">domain</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">protocol</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> s;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> addrinfo hints, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">res;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// do the lookup</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// [pretend we already filled out the &quot;hints&quot; struct]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getaddrinfo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;www.example.com&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">hints</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// again, you should do error-checking on getaddrinfo(), and walk</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the &quot;res&quot; linked list looking for valid entries instead of just</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// assuming the first one is good (like many of these examples do).</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// See the section on client/server for real examples.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;">(res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_family</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_socktype</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_protocol</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">socket</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">domain</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">type</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">protocol</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> addrinfo hints, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">res;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// do the lookup</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// [pretend we already filled out the &quot;hints&quot; struct]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getaddrinfo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;www.example.com&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">hints</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">res</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// again, you should do error-checking on getaddrinfo(), and walk</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the &quot;res&quot; linked list looking for valid entries instead of just</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assuming the first one is good (like many of these examples do).</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// See the section on client/server for real examples.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">socket</span><span style="color:#24292E;">(res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_family</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_socktype</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_protocol</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="bind" tabindex="-1">bind() <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">my_addr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">addrlen</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> addrinfo hints, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">res;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sockfd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// first, load up address structs with getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">memset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">hints</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">hints</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    hints.ai_family </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AF_UNSPEC;</span><span style="color:#6A737D;">  // use IPv4 or IPv6, whichever</span></span>
<span class="line"><span style="color:#E1E4E8;">    hints.ai_socktype </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SOCK_STREAM;</span></span>
<span class="line"><span style="color:#E1E4E8;">    hints.ai_flags </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AI_PASSIVE;</span><span style="color:#6A737D;">     // fill in my IP for me</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getaddrinfo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3490&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">hints</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// make a socket:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    sockfd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;">(res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_family</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_socktype</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_protocol</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// bind it to the port we passed in to getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(sockfd, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_addr</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_addrlen</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">my_addr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">addrlen</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> addrinfo hints, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">res;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sockfd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// first, load up address structs with getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">hints</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hints</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    hints.ai_family </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AF_UNSPEC;</span><span style="color:#6A737D;">  // use IPv4 or IPv6, whichever</span></span>
<span class="line"><span style="color:#24292E;">    hints.ai_socktype </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SOCK_STREAM;</span></span>
<span class="line"><span style="color:#24292E;">    hints.ai_flags </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AI_PASSIVE;</span><span style="color:#6A737D;">     // fill in my IP for me</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getaddrinfo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3490&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">hints</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">res</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// make a socket:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    sockfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">socket</span><span style="color:#24292E;">(res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_family</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_socktype</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_protocol</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// bind it to the port we passed in to getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(sockfd, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_addr</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_addrlen</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="connect" tabindex="-1">connect() <a class="header-anchor" href="#connect" aria-label="Permalink to &quot;connect()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">serv_addr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">addrlen</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> addrinfo hints, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">res;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sockfd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// first, load up address structs with getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">memset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">hints</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">hints</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    hints.ai_family </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AF_UNSPEC;</span></span>
<span class="line"><span style="color:#E1E4E8;">    hints.ai_socktype </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SOCK_STREAM;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getaddrinfo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;www.example.com&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;3490&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">hints</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// make a socket:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    sockfd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;">(res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_family</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_socktype</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_protocol</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// connect!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(sockfd, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_addr</span><span style="color:#E1E4E8;">, res</span><span style="color:#F97583;">-&gt;</span><span style="color:#FFAB70;">ai_addrlen</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">serv_addr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">addrlen</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> addrinfo hints, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">res;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sockfd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// first, load up address structs with getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">hints</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hints</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    hints.ai_family </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AF_UNSPEC;</span></span>
<span class="line"><span style="color:#24292E;">    hints.ai_socktype </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SOCK_STREAM;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getaddrinfo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;www.example.com&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3490&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">hints</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">res</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// make a socket:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    sockfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">socket</span><span style="color:#24292E;">(res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_family</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_socktype</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_protocol</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// connect!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(sockfd, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_addr</span><span style="color:#24292E;">, res</span><span style="color:#D73A49;">-&gt;</span><span style="color:#E36209;">ai_addrlen</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="listen" tabindex="-1">listen() <a class="header-anchor" href="#listen" aria-label="Permalink to &quot;listen()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">backlog</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getaddrinfo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">    /* accept() goes here */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">backlog</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getaddrinfo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">socket</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">    /* accept() goes here */</span></span></code></pre></div><h3 id="accept" tabindex="-1">accept() <a class="header-anchor" href="#accept" aria-label="Permalink to &quot;accept()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">addr</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">socklen_t</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">addrlen</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;netdb.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MYPORT</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3490&quot;</span><span style="color:#6A737D;">  // the port users will be connecting to</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BACKLOG</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#6A737D;">     // how many pending connections queue will hold</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr_storage their_addr;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">socklen_t</span><span style="color:#E1E4E8;"> addr_size;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> addrinfo hints, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">res;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> sockfd, new_fd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// !! don&#39;t forget your error checking for these calls !!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// first, load up address structs with getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">memset</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">hints, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;"> hints);</span></span>
<span class="line"><span style="color:#E1E4E8;">        hints.ai_family </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AF_UNSPEC;</span><span style="color:#6A737D;">  // use IPv4 or IPv6, whichever</span></span>
<span class="line"><span style="color:#E1E4E8;">        hints.ai_socktype </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SOCK_STREAM;</span></span>
<span class="line"><span style="color:#E1E4E8;">        hints.ai_flags </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AI_PASSIVE;</span><span style="color:#6A737D;">     // fill in my IP for me</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getaddrinfo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">, MYPORT, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">hints, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// make a socket, bind it, and listen on it:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        sockfd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">socket</span><span style="color:#E1E4E8;">(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(sockfd, BACKLOG);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// now accept an incoming connection:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        addr_size </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;"> their_addr;</span></span>
<span class="line"><span style="color:#E1E4E8;">        new_fd </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(sockfd, (</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">their_addr, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">addr_size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ready to communicate on socket descriptor new_fd!</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/types.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">addr</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">socklen_t</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">addrlen</span><span style="color:#24292E;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;string.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;netdb.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MYPORT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3490&quot;</span><span style="color:#6A737D;">  // the port users will be connecting to</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BACKLOG</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#6A737D;">     // how many pending connections queue will hold</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">void</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr_storage their_addr;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">socklen_t</span><span style="color:#24292E;"> addr_size;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> addrinfo hints, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">res;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sockfd, new_fd;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// !! don&#39;t forget your error checking for these calls !!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// first, load up address structs with getaddrinfo():</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">memset</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">hints, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;"> hints);</span></span>
<span class="line"><span style="color:#24292E;">        hints.ai_family </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AF_UNSPEC;</span><span style="color:#6A737D;">  // use IPv4 or IPv6, whichever</span></span>
<span class="line"><span style="color:#24292E;">        hints.ai_socktype </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SOCK_STREAM;</span></span>
<span class="line"><span style="color:#24292E;">        hints.ai_flags </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AI_PASSIVE;</span><span style="color:#6A737D;">     // fill in my IP for me</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getaddrinfo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">, MYPORT, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">hints, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// make a socket, bind it, and listen on it:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        sockfd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">socket</span><span style="color:#24292E;">(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(sockfd, BACKLOG);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// now accept an incoming connection:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        addr_size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;"> their_addr;</span></span>
<span class="line"><span style="color:#24292E;">        new_fd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(sockfd, (</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">their_addr, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">addr_size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ready to communicate on socket descriptor new_fd!</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h3 id="send-and-recv" tabindex="-1">send() and recv() <a class="header-anchor" href="#send-and-recv" aria-label="Permalink to &quot;send() and recv()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">flags</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recv</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">buf</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">flags</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recv</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">buf</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="sendto-and-recvfrom" tabindex="-1">sendto() and recvfrom() <a class="header-anchor" href="#sendto-and-recvfrom" aria-label="Permalink to &quot;sendto() and recvfrom()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendto</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">flags</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">socklen_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">tolen</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">recvfrom</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">buf</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">unsigned</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">flags</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">fromlen</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendto</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">socklen_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">tolen</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">recvfrom</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">buf</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">len</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">unsigned</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">flags</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">fromlen</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="close-and-shutdown" tabindex="-1">close() and shutdown() <a class="header-anchor" href="#close-and-shutdown" aria-label="Permalink to &quot;close() and shutdown()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">(sockfd); </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">how</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(sockfd); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">how</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="getpeername" tabindex="-1">getpeername() <a class="header-anchor" href="#getpeername" aria-label="Permalink to &quot;getpeername()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getpeername</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">sockfd</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> sockaddr </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">addr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">addrlen</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;sys/socket.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getpeername</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">sockfd</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> sockaddr </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">addr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">addrlen</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="gethostname" tabindex="-1">gethostname() <a class="header-anchor" href="#gethostname" aria-label="Permalink to &quot;gethostname()&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gethostname</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">hostname</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">size_t</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">size</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;unistd.h&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gethostname</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">hostname</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">size_t</span><span style="color:#24292E;"> </span><span style="color:#E36209;">size</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="client-server" tabindex="-1">Client-Server <a class="header-anchor" href="#client-server" aria-label="Permalink to &quot;Client-Server&quot;">​</a></h2><h2 id="advanced-techniques" tabindex="-1">Advanced Techniques <a class="header-anchor" href="#advanced-techniques" aria-label="Permalink to &quot;Advanced Techniques&quot;">​</a></h2>`,52);function r(E,y,i,d,F,h){const s=a("BryanMelanson");return l(),p("div",null,[c,o(s)])}const k=n(t,[["render",r]]);export{u as __pageData,k as default};
