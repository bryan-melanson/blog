import{_ as h,C as E,o,c as t,k as s,a as l,H as a,w as n,Q as c}from"./chunks/framework.5ad0ab50.js";const u="/base/assets/array.c4643d33.png",m="/base/assets/matrix.7f7b3e23.png",g="/base/assets/linkedlist.81da22e5.png",x="/base/assets/circularlinkedlist.95ce51ca.jpg",T="/base/assets/doublylinkedlist.b95e8491.jpg",f="/base/assets/binarytree.106ddac3.png",_="/base/assets/binarysearchtree.839a58e5.jpg",Q="/base/assets/stack.74ee08b2.png",b="/base/assets/queue.d0b6756e.png",w="/base/assets/heap.de67a1d9.png",F="/base/assets/hash.97afc089.jpg",k="/base/assets/graph.9cf32b20.png",_a=JSON.parse('{"title":"Data Structures","description":"","frontmatter":{"title":"Data Structures"},"headers":[],"relativePath":"study-guides/data-structures.md","filePath":"study-guides/data-structures.md"}'),v={name:"study-guides/data-structures.md"},A=c('<h1 id="data-structures" tabindex="-1">Data Structures <a class="header-anchor" href="#data-structures" aria-label="Permalink to &quot;Data Structures&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#data-structures">Data Structures</a><ul><li><a href="#bitwise-operations">Bitwise Operations</a><ul><li><a href="#operators">Operators</a></li><li><a href="#common-operations">Common Operations</a></li></ul></li><li><a href="#array">Array</a><ul><li><a href="#arrays-in-c">Arrays in C</a></li><li><a href="#static-vs-dynamic-arrays">Static vs. Dynamic Arrays</a></li><li><a href="#c-strings">C Strings</a></li></ul></li><li><a href="#matrix">Matrix</a><ul><li><a href="#normal-declaration">Normal Declaration</a></li><li><a href="#dynamic-declaration">Dynamic Declaration</a></li></ul></li><li><a href="#linked-list">Linked List</a><ul><li><a href="#inserting">Inserting</a></li><li><a href="#deleting">Deleting</a></li></ul></li><li><a href="#circular-linked-list">Circular Linked List</a><ul><li><a href="#inserting-1">Inserting</a></li><li><a href="#deleting-1">Deleting</a></li></ul></li><li><a href="#doubly-linked-list">Doubly Linked List</a><ul><li><a href="#inserting-2">Inserting</a></li><li><a href="#deleting-2">Deleting</a></li></ul></li><li><a href="#binary-tree">Binary Tree</a><ul><li><a href="#depth-first-traversal">Depth First Traversal</a></li><li><a href="#breadth-first-traversal">Breadth First Traversal</a></li></ul></li><li><a href="#avl-tree">AVL Tree</a></li><li><a href="#red-black-tree">Red-Black Tree</a></li><li><a href="#n-ary-tree">N-Ary Tree</a></li><li><a href="#binary-search-tree">Binary Search Tree</a><ul><li><a href="#searching">Searching</a></li><li><a href="#inserting-3">Inserting</a></li></ul></li><li><a href="#b-tree">B-Tree</a></li><li><a href="#stack">Stack</a><ul><li><a href="#stack-array">Stack Array</a></li><li><a href="#dynamic-stack-using-linked-list">Dynamic Stack Using Linked List</a></li></ul></li><li><a href="#queue">Queue</a></li><li><a href="#heap">Heap</a><ul><li><a href="#maximum-heap">Maximum Heap</a></li><li><a href="#minimum-heap">Minimum Heap</a></li></ul></li><li><a href="#hashes">Hashes</a><ul><li><a href="#code">Code</a></li><li><a href="#hash-functions">Hash Functions</a></li></ul></li><li><a href="#graph">Graph</a></li></ul></li></ul></nav><h2 id="bitwise-operations" tabindex="-1">Bitwise Operations <a class="header-anchor" href="#bitwise-operations" aria-label="Permalink to &quot;Bitwise Operations&quot;">​</a></h2><h3 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-label="Permalink to &quot;Operators&quot;">​</a></h3><ul><li>Shift Left <code>&lt;&lt;</code></li><li>Shift Right <code>&gt;&gt;</code></li><li>Or <code>|</code></li><li>And <code>&amp;</code></li><li>Invert <code>~</code></li><li>Exclusive Or <code>^</code></li></ul><h3 id="common-operations" tabindex="-1">Common Operations <a class="header-anchor" href="#common-operations" aria-label="Permalink to &quot;Common Operations&quot;">​</a></h3><p>In each of the following cases, it should be noted that each byte in hex format is two digits (<code>0x00</code>). Therefore, moving a hex value by one byte is equivalent to shifting it 8 bits, or <code>0x00FF &lt;&lt; 8 = 0xFF00</code>, and moving the hex value one space is half a byte, or 4 bits (a <strong>nibble</strong>).</p><h4 id="set-bit" tabindex="-1">Set Bit <a class="header-anchor" href="#set-bit" aria-label="Permalink to &quot;Set Bit&quot;">​</a></h4>',8),D={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},C={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},B=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),q=[B],V={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},L={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},S=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D465",d:"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",style:{"stroke-width":"3"}})])])],-1),M=[S],H={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},P={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.507ex",role:"img",focusable:"false",viewBox:"0 -666 500 666","aria-hidden":"true"},I=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})])])],-1),N=[I],j=s("code",null,"0x000000001",-1),Z=s("code",null,"AND",-1),z=s("code",null,"x & (1 << n)",-1),O=s("h4",{id:"clear-bit",tabindex:"-1"},[l("Clear Bit "),s("a",{class:"header-anchor",href:"#clear-bit","aria-label":'Permalink to "Clear Bit"'},"​")],-1),G={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},J={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},R=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),U=[R],Y={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},$={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},W=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D465",d:"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",style:{"stroke-width":"3"}})])])],-1),K=[W],X={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ss={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.507ex",role:"img",focusable:"false",viewBox:"0 -666 500 666","aria-hidden":"true"},as=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})])])],-1),ns=[as],ls=s("code",null,"0x000000001",-1),es=s("code",null,"AND",-1),os=s("code",null,"x & ~(1 << n)",-1),ts=s("h4",{id:"flip-bit",tabindex:"-1"},[l("Flip Bit "),s("a",{class:"header-anchor",href:"#flip-bit","aria-label":'Permalink to "Flip Bit"'},"​")],-1),ps={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},rs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},cs=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),is=[cs],ys={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Es={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},ds=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D465",d:"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z",style:{"stroke-width":"3"}})])])],-1),hs=[ds],us={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ms={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.131ex",height:"1.507ex",role:"img",focusable:"false",viewBox:"0 -666 500 666","aria-hidden":"true"},gs=s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mn"},[s("path",{"data-c":"31",d:"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z",style:{"stroke-width":"3"}})])])],-1),xs=[gs],Ts=s("code",null,"0x000000001",-1),fs=s("code",null,"XOR",-1),_s=s("code",null,"x ^ (1 << n)",-1),Qs=c('<h4 id="clear" tabindex="-1">Clear <a class="header-anchor" href="#clear" aria-label="Permalink to &quot;Clear&quot;">​</a></h4><p>To clear all values, <code>AND</code> the value with <code>0xFFFF</code>. <code>x &amp; 0xFFFF</code></p><h4 id="little-endian-to-big-endian" tabindex="-1">Little Endian to Big Endian <a class="header-anchor" href="#little-endian-to-big-endian" aria-label="Permalink to &quot;Little Endian to Big Endian&quot;">​</a></h4><p>A little-endian system, in contrast, stores the least-significant byte at the smallest address.</p>',4),bs=s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"Binary (Decimal: 149)"),s("th",{style:{"text-align":"center"}},[s("code",null,"1")]),s("th",{style:{"text-align":"center"}},[s("code",null,"0")]),s("th",{style:{"text-align":"center"}},[s("code",null,"0")]),s("th",{style:{"text-align":"center"}},[s("code",null,"1")]),s("th",{style:{"text-align":"center"}},[s("code",null,"0")]),s("th",{style:{"text-align":"center"}},[s("code",null,"1")]),s("th",{style:{"text-align":"center"}},[s("code",null,"0")]),s("th",{style:{"text-align":"center"}},[s("code",null,"1")])])],-1),ws=s("td",{style:{"text-align":"left"}},"Bit weight",-1),Fs={style:{"text-align":"center"}},ks={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},vs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.903ex",role:"img",focusable:"false",viewBox:"0 -841 936.6 841","aria-hidden":"true"},As=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" style="stroke-width:3;"></path></g></g></g></g>',1),Ds=[As],Cs={style:{"text-align":"center"}},Bs={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},qs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 936.6 833.9","aria-hidden":"true"},Vs=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path></g></g></g></g>',1),Ls=[Vs],Ss={style:{"text-align":"center"}},Ms={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Hs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 936.6 833.9","aria-hidden":"true"},Ps=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width:3;"></path></g></g></g></g>',1),Is=[Ps],Ns={style:{"text-align":"center"}},js={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Zs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.904ex",role:"img",focusable:"false",viewBox:"0 -841.7 936.6 841.7","aria-hidden":"true"},zs=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" style="stroke-width:3;"></path></g></g></g></g>',1),Os=[zs],Gs={style:{"text-align":"center"}},Js={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Rs={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.885ex",role:"img",focusable:"false",viewBox:"0 -833.2 936.6 833.2","aria-hidden":"true"},Us=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path></g></g></g></g>',1),Ys=[Us],$s={style:{"text-align":"center"}},Ws={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Ks={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 936.6 833.9","aria-hidden":"true"},Xs=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g></g></g>',1),sa=[Xs],aa={style:{"text-align":"center"}},na={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},la={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 936.6 833.9","aria-hidden":"true"},ea=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g></g></g>',1),oa=[ea],ta={style:{"text-align":"center"}},pa={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ra={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.119ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 936.6 833.9","aria-hidden":"true"},ca=c('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path></g></g></g></g>',1),ia=[ca],ya=s("tr",null,[s("td",{style:{"text-align":"left"}},"Bit position"),s("td",{style:{"text-align":"center"}},"MSB"),s("td",{style:{"text-align":"center"}}),s("td",{style:{"text-align":"center"}}),s("td",{style:{"text-align":"center"}}),s("td",{style:{"text-align":"center"}}),s("td",{style:{"text-align":"center"}}),s("td",{style:{"text-align":"center"}}),s("td",{style:{"text-align":"center"}},"LSB")],-1),Ea=c('<p>In the case of the value <code>0x12345678</code>, the <strong>least significant byte</strong> of this value <code>0x78</code> is stored in the lowest little Endian address, and subsequent bytes are stored in the next locations. The least significant byte can be considered the byte with the lowest value, when evaluated in typical bitwise fashion: <code>0x78563412</code></p><ul><li><code>0x78</code> <code>(0x004000)</code></li><li><code>0x56</code> <code>(0x004001)</code></li><li><code>0x34</code> <code>(0x004002)</code></li><li><code>0x12</code> <code>(0x004003)</code></li></ul><h4 id="big-endian-to-little-endian" tabindex="-1">Big Endian to Little Endian <a class="header-anchor" href="#big-endian-to-little-endian" aria-label="Permalink to &quot;Big Endian to Little Endian&quot;">​</a></h4><p>In a Big Endian representation of <code>0x12345678</code>, the <strong>most significant byte</strong> (<code>0x12</code>) is stored at the lowest memory address: <code>0x12345678</code></p><ul><li><code>0x12</code> <code>(0x004000)</code></li><li><code>0x34</code> <code>(0x004001)</code></li><li><code>0x56</code> <code>(0x004002)</code></li><li><code>0x78</code> <code>(0x004003)</code></li></ul><p>To reverse these positions, the bytes can be isolated and bit-shifted by the appropriate number of bits to form the appropriate order.</p><ul><li><code>(0x12345678 &amp; 0x000000FF) &lt;&lt; 24</code></li><li><code>(0x12345678 &amp; 0x0000FF00) &lt;&lt; 16</code></li><li><code>(0x12345678 &amp; 0x00FF0000) &lt;&lt; 8</code></li><li><code>(0x12345678 &amp; 0xFF000000) &gt;&gt; 24</code></li></ul><h2 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h2><p>Arrays are collections of same-type data items stored in a contiguous memory location. Knowing the data type, each element is located at an offset based on that data size. In other words, for <code>int data[]</code> the data at <code>data[1]</code> is located at <code>data[0] + sizeof(int)</code>.</p><p><img src="'+u+'" alt="array"></p><h3 id="arrays-in-c" tabindex="-1">Arrays in C <a class="header-anchor" href="#arrays-in-c" aria-label="Permalink to &quot;Arrays in C&quot;">​</a></h3><p>There is no index out-of-bound checking in C, so if access goes beyond the index boundaries of the array (<code>0-(n-1)</code>) there will be undefined behavior.</p><h3 id="static-vs-dynamic-arrays" tabindex="-1">Static vs. Dynamic Arrays <a class="header-anchor" href="#static-vs-dynamic-arrays" aria-label="Permalink to &quot;Static vs. Dynamic Arrays&quot;">​</a></h3><p>Pointer and array accesses can be treated the same way in C, either by accessing the values by using the <code>[]</code> operator, or by incrementing the value of the pointer.</p><h4 id="static-arrays" tabindex="-1">Static Arrays <a class="header-anchor" href="#static-arrays" aria-label="Permalink to &quot;Static Arrays&quot;">​</a></h4><p>In C, the size of an array should be decided at compile time by defining the array size either by declaring an array with size constraints such as <code>arr[10]</code> or by using <code>malloc</code> to define the required size. At run time this size will be used to allocate the required memory space.</p><h4 id="dynamic-arrays" tabindex="-1">Dynamic Arrays <a class="header-anchor" href="#dynamic-arrays" aria-label="Permalink to &quot;Dynamic Arrays&quot;">​</a></h4><p>In C++ an array can be passed a variable and the size can be determined for the memory allocation at run time.</p><h3 id="c-strings" tabindex="-1">C Strings <a class="header-anchor" href="#c-strings" aria-label="Permalink to &quot;C Strings&quot;">​</a></h3><p>A C string is a pointer to an array of <code>char</code> data items which is terminated by the <code>NULL</code> character at the size limit. So, a <code>char</code> array of <code>n</code> items will contain data at elements <code>0-(n-1)</code>, while the value at <code>n</code> will be <code>NULL</code>. This allows for string operations to check for the boundary of memory space for the string object.</p><h2 id="matrix" tabindex="-1">Matrix <a class="header-anchor" href="#matrix" aria-label="Permalink to &quot;Matrix&quot;">​</a></h2><p><img src="'+m+'" alt="matrix"></p><h3 id="normal-declaration" tabindex="-1">Normal Declaration <a class="header-anchor" href="#normal-declaration" aria-label="Permalink to &quot;Normal Declaration&quot;">​</a></h3><h3 id="dynamic-declaration" tabindex="-1">Dynamic Declaration <a class="header-anchor" href="#dynamic-declaration" aria-label="Permalink to &quot;Dynamic Declaration&quot;">​</a></h3><h2 id="linked-list" tabindex="-1">Linked List <a class="header-anchor" href="#linked-list" aria-label="Permalink to &quot;Linked List&quot;">​</a></h2><p>Unlike arrays, Linked Lists are dynamic and can grow by pointing to non-contiguous locations in memory using pointers. Extra memory is required when representing each pointer in the linked list, but it allows for easily inserting and deleting objects in the linked list.</p><p><img src="'+g+'" alt="linkedlist"></p><p>Each node in the linked list consists of its data, and a pointer to the next object in the linked list. In the case that the head of the linked list is null.</p><h3 id="inserting" tabindex="-1">Inserting <a class="header-anchor" href="#inserting" aria-label="Permalink to &quot;Inserting&quot;">​</a></h3><h3 id="deleting" tabindex="-1">Deleting <a class="header-anchor" href="#deleting" aria-label="Permalink to &quot;Deleting&quot;">​</a></h3><h2 id="circular-linked-list" tabindex="-1">Circular Linked List <a class="header-anchor" href="#circular-linked-list" aria-label="Permalink to &quot;Circular Linked List&quot;">​</a></h2><h3 id="inserting-1" tabindex="-1">Inserting <a class="header-anchor" href="#inserting-1" aria-label="Permalink to &quot;Inserting&quot;">​</a></h3><h3 id="deleting-1" tabindex="-1">Deleting <a class="header-anchor" href="#deleting-1" aria-label="Permalink to &quot;Deleting&quot;">​</a></h3><p><img src="'+x+'" alt="circularlinkedlist"></p><h2 id="doubly-linked-list" tabindex="-1">Doubly Linked List <a class="header-anchor" href="#doubly-linked-list" aria-label="Permalink to &quot;Doubly Linked List&quot;">​</a></h2><p><img src="'+T+'" alt="doublylinkedlist"></p><h3 id="inserting-2" tabindex="-1">Inserting <a class="header-anchor" href="#inserting-2" aria-label="Permalink to &quot;Inserting&quot;">​</a></h3><h3 id="deleting-2" tabindex="-1">Deleting <a class="header-anchor" href="#deleting-2" aria-label="Permalink to &quot;Deleting&quot;">​</a></h3><h2 id="binary-tree" tabindex="-1">Binary Tree <a class="header-anchor" href="#binary-tree" aria-label="Permalink to &quot;Binary Tree&quot;">​</a></h2><p><img src="'+f+`" alt="binarytree"></p><p>A Binary Tree is any tree organized in which each node, or <strong>root</strong> has at most two children, or <strong>leaves</strong>, hence <em>binary</em>, designated left and right.</p><h3 id="depth-first-traversal" tabindex="-1">Depth First Traversal <a class="header-anchor" href="#depth-first-traversal" aria-label="Permalink to &quot;Depth First Traversal&quot;">​</a></h3><p><strong>Depth First Traversal</strong> traverses the tree to its extents before backtracking and completing the traversal. It will explore until it reaches nodes with no children before moving to the nearest neighbor. The order of traversal can be categorized into <strong>Pre-Order</strong>, <strong>In-Order</strong> and <strong>Post-Order</strong> which determine which order the nodes (<em>Left</em>, <em>right</em>,<em>center</em>) are visited.</p><h4 id="pre-order-traversal" tabindex="-1">Pre-Order Traversal <a class="header-anchor" href="#pre-order-traversal" aria-label="Permalink to &quot;Pre-Order Traversal&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pre_order</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Node</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// print n-&gt;value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n-&gt;left)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pre_order</span><span style="color:#E1E4E8;">(n-&gt;left);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n-&gt;right)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pre_order</span><span style="color:#E1E4E8;">(n-&gt;right);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pre_order</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Node</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// print n-&gt;value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n-&gt;left)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pre_order</span><span style="color:#24292E;">(n-&gt;left);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n-&gt;right)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pre_order</span><span style="color:#24292E;">(n-&gt;right);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="in-order-traversal" tabindex="-1">In-Order Traversal <a class="header-anchor" href="#in-order-traversal" aria-label="Permalink to &quot;In-Order Traversal&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">in_order</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Node</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n-&gt;left)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pre_order</span><span style="color:#E1E4E8;">(n-&gt;left);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// print n-&gt;value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n-&gt;right)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pre_order</span><span style="color:#E1E4E8;">(n-&gt;right);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">in_order</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Node</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n-&gt;left)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pre_order</span><span style="color:#24292E;">(n-&gt;left);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// print n-&gt;value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n-&gt;right)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pre_order</span><span style="color:#24292E;">(n-&gt;right);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="post-order-traversal" tabindex="-1">Post-Order Traversal <a class="header-anchor" href="#post-order-traversal" aria-label="Permalink to &quot;Post-Order Traversal&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post_order</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> Node</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n-&gt;left)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pre_order</span><span style="color:#E1E4E8;">(n-&gt;left);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n-&gt;right)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pre_order</span><span style="color:#E1E4E8;">(n-&gt;right);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// print n-&gt;value</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post_order</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> Node</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n-&gt;left)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pre_order</span><span style="color:#24292E;">(n-&gt;left);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n-&gt;right)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pre_order</span><span style="color:#24292E;">(n-&gt;right);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// print n-&gt;value</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="breadth-first-traversal" tabindex="-1">Breadth First Traversal <a class="header-anchor" href="#breadth-first-traversal" aria-label="Permalink to &quot;Breadth First Traversal&quot;">​</a></h3><p>Breadth first traversal traverses a tree by visiting all nodes at a given height, before descending the depth of the tree.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bfs</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">    queue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Queue()</span></span>
<span class="line"><span style="color:#E1E4E8;">    queue.put(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> queue.empty():</span></span>
<span class="line"><span style="color:#E1E4E8;">        current_node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> queue.get()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(current_node.value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> current_node.left_child:</span></span>
<span class="line"><span style="color:#E1E4E8;">            queue.put(current_node.left_child)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> current_node.right_child:</span></span>
<span class="line"><span style="color:#E1E4E8;">            queue.put(current_node.right_child)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bfs</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">    queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Queue()</span></span>
<span class="line"><span style="color:#24292E;">    queue.put(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> queue.empty():</span></span>
<span class="line"><span style="color:#24292E;">        current_node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue.get()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(current_node.value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> current_node.left_child:</span></span>
<span class="line"><span style="color:#24292E;">            queue.put(current_node.left_child)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> current_node.right_child:</span></span>
<span class="line"><span style="color:#24292E;">            queue.put(current_node.right_child)</span></span></code></pre></div><h2 id="avl-tree" tabindex="-1">AVL Tree <a class="header-anchor" href="#avl-tree" aria-label="Permalink to &quot;AVL Tree&quot;">​</a></h2><h2 id="red-black-tree" tabindex="-1">Red-Black Tree <a class="header-anchor" href="#red-black-tree" aria-label="Permalink to &quot;Red-Black Tree&quot;">​</a></h2><h2 id="n-ary-tree" tabindex="-1">N-Ary Tree <a class="header-anchor" href="#n-ary-tree" aria-label="Permalink to &quot;N-Ary Tree&quot;">​</a></h2><h2 id="binary-search-tree" tabindex="-1">Binary Search Tree <a class="header-anchor" href="#binary-search-tree" aria-label="Permalink to &quot;Binary Search Tree&quot;">​</a></h2><p><img src="`+_+`" alt="binarysearchtree"></p><p>A Binary Search Tree is one in which the value of the node stored on the left is less than the value of root, and the value of the node on the right is greater than the value of the root. By organizing a tree in this way, values can easily be found using a similar method as binary search which eliminates half of the remaining possibilities at each step.</p><h3 id="searching" tabindex="-1">Searching <a class="header-anchor" href="#searching" aria-label="Permalink to &quot;Searching&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(Node</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">curr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (curr-&gt;data </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> value) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> curr-&gt;value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (curr-&gt;left) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(curr-&gt;left, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (curr-&gt;right) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(curr-&gt;right, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">curr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (curr-&gt;data </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> value) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> curr-&gt;value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (curr-&gt;left) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(curr-&gt;left, value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (curr-&gt;right) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(curr-&gt;right, value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="inserting-3" tabindex="-1">Inserting <a class="header-anchor" href="#inserting-3" aria-label="Permalink to &quot;Inserting&quot;">​</a></h3><p>To maintain the structure rules of the Binary Search Tree after insertion, the leaves of each node must be evaluated and the next route determined until a non-null spot that meets the criteria is determined. If the the current value of the node is greater than the value to be inserted, it will attempt to insert on the left if the left is currently null. If the left is not null, it will recursively evaluate the left node in the same way.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(Node</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">new</span><span style="color:#E1E4E8;">, Node</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">curr</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> curr-&gt;value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (curr-&gt;left </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            curr-&gt;left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> new;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(curr-&gt;left, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (curr-&gt;right </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            curr-&gt;right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> new;</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(curr-&gt;right, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">new</span><span style="color:#24292E;">, Node</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">curr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> curr-&gt;value) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (curr-&gt;left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            curr-&gt;left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> new;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(curr-&gt;left, value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (curr-&gt;right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            curr-&gt;right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> new;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(curr-&gt;right, value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="b-tree" tabindex="-1">B-Tree <a class="header-anchor" href="#b-tree" aria-label="Permalink to &quot;B-Tree&quot;">​</a></h2><h2 id="stack" tabindex="-1">Stack <a class="header-anchor" href="#stack" aria-label="Permalink to &quot;Stack&quot;">​</a></h2><p><img src="`+Q+`" alt="stack"></p><h3 id="stack-array" tabindex="-1">Stack Array <a class="header-anchor" href="#stack-array" aria-label="Permalink to &quot;Stack Array&quot;">​</a></h3><p>A struct can be created which tracks the index of the top, and holds the allocated array. When popping a value, the array index should be wiped with <code>null</code> value and top decremented. If the top index is out of range, it should throw an error to indicate a stack underflow.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* Stack implementation using array in C</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">#define</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CAPACITY</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">typedef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> stack {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> top;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">[CAPACITY];</span></span>
<span class="line"><span style="color:#E1E4E8;">} stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to push a new element in stack</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(stack</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    s-&gt;arr[s-&gt;top</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to pop element from top of stack</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">(stack</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">s</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (top </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s-&gt;arr[s-&gt;top</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* Stack implementation using array in C</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">#define</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CAPACITY</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">typedef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stack {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> top;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">[CAPACITY];</span></span>
<span class="line"><span style="color:#24292E;">} stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to push a new element in stack</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(stack</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">s</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">val</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    s-&gt;arr[s-&gt;top</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to pop element from top of stack</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">(stack</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">s</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (top </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s-&gt;arr[s-&gt;top</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="dynamic-stack-using-linked-list" tabindex="-1">Dynamic Stack Using Linked List <a class="header-anchor" href="#dynamic-stack-using-linked-list" aria-label="Permalink to &quot;Dynamic Stack Using Linked List&quot;">​</a></h3><p>When the size of the array is not known and allocating a static array of its capacity may be wasteful, Linked Lists can be used to connect the items on the stack. When popping an object, the node pointer should be stored in a temporary pointer, then free&#39;d once the new top is the old node&#39;s next pointer.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* Stack implementation using linked list in C</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Define stack node structure</span></span>
<span class="line"><span style="color:#6A737D;">// The variable also instantiates this as a global</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> stack {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> stack </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">next;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">top;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to push a new element in stack.</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">element</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Create a new node and push to stack</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> stack</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> newNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> stack));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Assign data to new node in stack</span></span>
<span class="line"><span style="color:#E1E4E8;">    newNode-&gt;data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> element;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Next element after new node should be current top element</span></span>
<span class="line"><span style="color:#E1E4E8;">    newNode-&gt;next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> top;        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Make sure new node is always at top</span></span>
<span class="line"><span style="color:#E1E4E8;">    top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newNode;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to pop element from top of stack.</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Check stack underflow</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">top)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Stack is empty.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Hold pointer to node to be removed</span></span>
<span class="line"><span style="color:#E1E4E8;">    stack</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> old </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> top;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Copy data from stack&#39;s top element</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> old-&gt;data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Move top to its next element</span></span>
<span class="line"><span style="color:#E1E4E8;">    top </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> old-&gt;next;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">free</span><span style="color:#E1E4E8;">(old);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">* Stack implementation using linked list in C</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Define stack node structure</span></span>
<span class="line"><span style="color:#6A737D;">// The variable also instantiates this as a global</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stack {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stack </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">next;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">top;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to push a new element in stack.</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">element</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Create a new node and push to stack</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stack</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> newNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> stack));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Assign data to new node in stack</span></span>
<span class="line"><span style="color:#24292E;">    newNode-&gt;data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Next element after new node should be current top element</span></span>
<span class="line"><span style="color:#24292E;">    newNode-&gt;next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> top;        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Make sure new node is always at top</span></span>
<span class="line"><span style="color:#24292E;">    top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Function to pop element from top of stack.</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Check stack underflow</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">top)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Stack is empty.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Hold pointer to node to be removed</span></span>
<span class="line"><span style="color:#24292E;">    stack</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> old </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> top;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Copy data from stack&#39;s top element</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> old-&gt;data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Move top to its next element</span></span>
<span class="line"><span style="color:#24292E;">    top </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> old-&gt;next;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">free</span><span style="color:#24292E;">(old);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="queue" tabindex="-1">Queue <a class="header-anchor" href="#queue" aria-label="Permalink to &quot;Queue&quot;">​</a></h2><p><img src="`+b+'" alt="queue"></p><h2 id="heap" tabindex="-1">Heap <a class="header-anchor" href="#heap" aria-label="Permalink to &quot;Heap&quot;">​</a></h2><p><img src="'+w+'" alt="heap"></p><h3 id="maximum-heap" tabindex="-1">Maximum Heap <a class="header-anchor" href="#maximum-heap" aria-label="Permalink to &quot;Maximum Heap&quot;">​</a></h3><h3 id="minimum-heap" tabindex="-1">Minimum Heap <a class="header-anchor" href="#minimum-heap" aria-label="Permalink to &quot;Minimum Heap&quot;">​</a></h3><h2 id="hashes" tabindex="-1">Hashes <a class="header-anchor" href="#hashes" aria-label="Permalink to &quot;Hashes&quot;">​</a></h2><p><img src="'+F+`" alt="hash"></p><p>A hash map combines features of a static array and a linked list, without being bound by issues such as inserting new values in a size-defined array, or searching for values in a linked list. A hash map has a preallocated buffer, and uses the value of the data to be inserted to generate a key, or index by hashing it. If a hash is properly defined, there will be no hash collisions, and data with an indentical value will be stored in the identical spot in the hash map. This way, a value need only be calculated once, then stored in the hash map. Insted of generating the value again by calculation, the value can be retrieved from the hash map by visiting the pre-determined index.</p><p>The <strong>Hash Set</strong> is a hash map which stores no repeated values.</p><h3 id="code" tabindex="-1">Code <a class="header-anchor" href="#code" aria-label="Permalink to &quot;Code&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> SIZE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> r </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> SIZE </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">[index]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        index </span><span style="color:#F97583;">%=</span><span style="color:#E1E4E8;"> SIZE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">[index] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">[index]</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> index </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hash</span><span style="color:#E1E4E8;">(key);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">[index]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">[index] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">[index];</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        index</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        index </span><span style="color:#F97583;">%=</span><span style="color:#E1E4E8;"> SIZE;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// The requested value is checked for, in each step of the loop </span></span>
<span class="line"><span style="color:#6A737D;">// then the hash map is populated with the value if it doesn&#39;t </span></span>
<span class="line"><span style="color:#6A737D;">// already exist. This means the check will take O(n)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">numsSize</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">keys</span><span style="color:#E1E4E8;">[SIZE];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">values</span><span style="color:#E1E4E8;">[SIZE] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> numsSize; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> complements </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">search</span><span style="color:#E1E4E8;">(keys, values, complements);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">indices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">malloc</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">sizeof</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">indices</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">indices</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> indices;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(keys, values, </span><span style="color:#FFAB70;">nums</span><span style="color:#E1E4E8;">[i], i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> SIZE;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> SIZE </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">values</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">values</span><span style="color:#24292E;">[index]) {</span></span>
<span class="line"><span style="color:#24292E;">        index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        index </span><span style="color:#D73A49;">%=</span><span style="color:#24292E;"> SIZE;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">keys</span><span style="color:#24292E;">[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">values</span><span style="color:#24292E;">[index]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">keys</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#E36209;">values</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">values</span><span style="color:#24292E;">[index]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">keys</span><span style="color:#24292E;">[index] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#E36209;">values</span><span style="color:#24292E;">[index];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        index </span><span style="color:#D73A49;">%=</span><span style="color:#24292E;"> SIZE;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// The requested value is checked for, in each step of the loop </span></span>
<span class="line"><span style="color:#6A737D;">// then the hash map is populated with the value if it doesn&#39;t </span></span>
<span class="line"><span style="color:#6A737D;">// already exist. This means the check will take O(n)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">numsSize</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">target</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">keys</span><span style="color:#24292E;">[SIZE];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">values</span><span style="color:#24292E;">[SIZE] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> numsSize; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> complements </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">[i];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">search</span><span style="color:#24292E;">(keys, values, complements);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">indices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">malloc</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">sizeof</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">indices</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">indices</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> indices;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(keys, values, </span><span style="color:#E36209;">nums</span><span style="color:#24292E;">[i], i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="hash-functions" tabindex="-1">Hash Functions <a class="header-anchor" href="#hash-functions" aria-label="Permalink to &quot;Hash Functions&quot;">​</a></h3><h4 id="simple-hash-function-for-strings" tabindex="-1">Simple Hash Function for Strings <a class="header-anchor" href="#simple-hash-function-for-strings" aria-label="Permalink to &quot;Simple Hash Function for Strings&quot;">​</a></h4><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hash_function</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">char*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> hash </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toupper</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Subtracting &#39;A&#39; sets the index of alpha characters </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// starting with 0 for &#39;A&#39;. &#39;A&#39; is 0, &#39;B&#39; is 1, etc.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hash </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> SIZE;</span><span style="color:#6A737D;"> // Constrain to the array size</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hash_function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">char*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toupper</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Subtracting &#39;A&#39; sets the index of alpha characters </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// starting with 0 for &#39;A&#39;. &#39;A&#39; is 0, &#39;B&#39; is 1, etc.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> SIZE;</span><span style="color:#6A737D;"> // Constrain to the array size</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>If a collision occurs, linked lists can point to values with this same index.</p><p>A good hash value would distribute values evenly across the map.</p><h2 id="graph" tabindex="-1">Graph <a class="header-anchor" href="#graph" aria-label="Permalink to &quot;Graph&quot;">​</a></h2><p><img src="`+k+'" alt="graph"></p>',91);function da(ha,ua,ma,ga,xa,Ta){const y=E("mi"),p=E("math"),r=E("mjx-assistive-mml"),e=E("mn"),i=E("msup"),d=E("BryanMelanson");return o(),t("div",null,[A,s("p",null,[l("To set the "),s("mjx-container",D,[(o(),t("svg",C,q)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(y,null,{default:n(()=>[l("n")]),_:1})]),_:1})]),_:1})]),l("th bit in value "),s("mjx-container",V,[(o(),t("svg",L,M)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(y,null,{default:n(()=>[l("x")]),_:1})]),_:1})]),_:1})]),l(", shift "),s("mjx-container",H,[(o(),t("svg",P,N)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(e,null,{default:n(()=>[l("1")]),_:1})]),_:1})]),_:1})]),l(" ("),j,l(") by n bits and "),Z,l(" them. "),z]),O,s("p",null,[l("To clear the "),s("mjx-container",G,[(o(),t("svg",J,U)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(y,null,{default:n(()=>[l("n")]),_:1})]),_:1})]),_:1})]),l("th bit in value "),s("mjx-container",Y,[(o(),t("svg",$,K)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(y,null,{default:n(()=>[l("x")]),_:1})]),_:1})]),_:1})]),l(", shift "),s("mjx-container",X,[(o(),t("svg",ss,ns)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(e,null,{default:n(()=>[l("1")]),_:1})]),_:1})]),_:1})]),l(" ("),ls,l(") by n bits and invert the "),es,l("ed value. "),os]),ts,s("p",null,[l("To flip the "),s("mjx-container",ps,[(o(),t("svg",rs,is)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(y,null,{default:n(()=>[l("n")]),_:1})]),_:1})]),_:1})]),l("th bit in value "),s("mjx-container",ys,[(o(),t("svg",Es,hs)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(y,null,{default:n(()=>[l("x")]),_:1})]),_:1})]),_:1})]),l(", shift "),s("mjx-container",us,[(o(),t("svg",ms,xs)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(e,null,{default:n(()=>[l("1")]),_:1})]),_:1})]),_:1})]),l(" ("),Ts,l(") by n bits and "),fs,l(" them. "),_s]),Qs,s("table",null,[bs,s("tbody",null,[s("tr",null,[ws,s("td",Fs,[s("mjx-container",ks,[(o(),t("svg",vs,Ds)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("7")]),_:1})]),_:1})]),_:1})]),_:1})])]),s("td",Cs,[s("mjx-container",Bs,[(o(),t("svg",qs,Ls)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("6")]),_:1})]),_:1})]),_:1})]),_:1})])]),s("td",Ss,[s("mjx-container",Ms,[(o(),t("svg",Hs,Is)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("5")]),_:1})]),_:1})]),_:1})]),_:1})])]),s("td",Ns,[s("mjx-container",js,[(o(),t("svg",Zs,Os)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("4")]),_:1})]),_:1})]),_:1})]),_:1})])]),s("td",Gs,[s("mjx-container",Js,[(o(),t("svg",Rs,Ys)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("3")]),_:1})]),_:1})]),_:1})]),_:1})])]),s("td",$s,[s("mjx-container",Ws,[(o(),t("svg",Ks,sa)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("2")]),_:1})]),_:1})]),_:1})]),_:1})])]),s("td",aa,[s("mjx-container",na,[(o(),t("svg",la,oa)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("1")]),_:1})]),_:1})]),_:1})]),_:1})])]),s("td",ta,[s("mjx-container",pa,[(o(),t("svg",ra,ia)),a(r,{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},{default:n(()=>[a(p,{xmlns:"http://www.w3.org/1998/Math/MathML"},{default:n(()=>[a(i,null,{default:n(()=>[a(e,null,{default:n(()=>[l("2")]),_:1}),a(e,null,{default:n(()=>[l("0")]),_:1})]),_:1})]),_:1})]),_:1})])])]),ya])]),Ea,a(d)])}const Qa=h(v,[["render",da]]);export{_a as __pageData,Qa as default};
